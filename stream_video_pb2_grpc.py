# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import stream_video_pb2 as stream__video__pb2


class VideoStreamStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendFream = channel.unary_unary(
                '/VideoStream/SendFream',
                request_serializer=stream__video__pb2.Fream.SerializeToString,
                response_deserializer=stream__video__pb2.Result.FromString,
                )
        self.PushStream = channel.stream_unary(
                '/VideoStream/PushStream',
                request_serializer=stream__video__pb2.Fream.SerializeToString,
                response_deserializer=stream__video__pb2.Result.FromString,
                )
        self.PushAndPull = channel.stream_stream(
                '/VideoStream/PushAndPull',
                request_serializer=stream__video__pb2.Fream.SerializeToString,
                response_deserializer=stream__video__pb2.Fream.FromString,
                )
        self.FaceDetection = channel.stream_unary(
                '/VideoStream/FaceDetection',
                request_serializer=stream__video__pb2.Frame.SerializeToString,
                response_deserializer=stream__video__pb2.Result.FromString,
                )
        self.Canny = channel.stream_unary(
                '/VideoStream/Canny',
                request_serializer=stream__video__pb2.Frame.SerializeToString,
                response_deserializer=stream__video__pb2.Result.FromString,
                )


class VideoStreamServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendFream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushAndPull(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FaceDetection(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Canny(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VideoStreamServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendFream': grpc.unary_unary_rpc_method_handler(
                    servicer.SendFream,
                    request_deserializer=stream__video__pb2.Fream.FromString,
                    response_serializer=stream__video__pb2.Result.SerializeToString,
            ),
            'PushStream': grpc.stream_unary_rpc_method_handler(
                    servicer.PushStream,
                    request_deserializer=stream__video__pb2.Fream.FromString,
                    response_serializer=stream__video__pb2.Result.SerializeToString,
            ),
            'PushAndPull': grpc.stream_stream_rpc_method_handler(
                    servicer.PushAndPull,
                    request_deserializer=stream__video__pb2.Fream.FromString,
                    response_serializer=stream__video__pb2.Fream.SerializeToString,
            ),
            'FaceDetection': grpc.stream_unary_rpc_method_handler(
                    servicer.FaceDetection,
                    request_deserializer=stream__video__pb2.Frame.FromString,
                    response_serializer=stream__video__pb2.Result.SerializeToString,
            ),
            'Canny': grpc.stream_unary_rpc_method_handler(
                    servicer.Canny,
                    request_deserializer=stream__video__pb2.Frame.FromString,
                    response_serializer=stream__video__pb2.Result.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'VideoStream', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VideoStream(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendFream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VideoStream/SendFream',
            stream__video__pb2.Fream.SerializeToString,
            stream__video__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PushStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/VideoStream/PushStream',
            stream__video__pb2.Fream.SerializeToString,
            stream__video__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PushAndPull(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/VideoStream/PushAndPull',
            stream__video__pb2.Fream.SerializeToString,
            stream__video__pb2.Fream.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FaceDetection(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/VideoStream/FaceDetection',
            stream__video__pb2.Frame.SerializeToString,
            stream__video__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Canny(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/VideoStream/Canny',
            stream__video__pb2.Frame.SerializeToString,
            stream__video__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
